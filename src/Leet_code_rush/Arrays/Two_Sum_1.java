package Leet_code_rush.Arrays;

import java.util.Arrays;
import java.util.HashMap;

public class Two_Sum_1 {

    public static void main(String[] args) {

        int[] array = new int[]{1, 5, 67, 56, 4, 3, 6, 2, 12, 98, 49, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9, 45, 67, 45, 12, 10, 76, 5, 3, 15, 44, 9};
        //array = new int[] {1, 2, 3, 4, 5, 6, 12, 56, 67, 98};
        int target = 100;

        long finish1 = System.nanoTime();

        System.out.println(Arrays.toString(twoSum(array, target)));

        long finish2 = System.nanoTime();

        System.out.println(Arrays.toString(twoSum_hash_table(array, target)));

        long finish3 = System.nanoTime();

        System.out.println("t1 = " + (finish2 - finish1) / 1000 + " microsec");
        System.out.println("t2 = " + (finish3 - finish2) / 1000 + " microsec");

    }

    public static int[] twoSum(int[] nums, int target) { /** accepted (speed: very slow) **/

        int[] answer = new int[2];

        for (int i = 0; i < nums.length; i++) {

            for (int j = i + 1; j < nums.length; j ++) {

                if (nums[i] + nums[j] == target) {
                    answer[0] = i;
                    answer[1] = j;
                    break;
                }
            }
        }

       return answer;
    }









    public static int[] twoSum_hash_table (int[] nums, int target) { /** accepted (speed: 1ms, ultra-fast, beats 99,78 java submissions) **/

        int[] answer = new int[2];

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

        for (int i = 0; i < nums.length; i ++) {

            if (map.containsKey(nums[i])) {
                answer[0] = map.get(nums[i]);
                answer[1] = i;
                break;
            } else map.put(target - nums[i], i);
        }

        return answer;
    }

}
